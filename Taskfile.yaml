version: "3"
vars:
  TOOL_DIR: .tool

  OWNER: anchore
  PROJECT: binny

  TMP_DIR: .tmp
  SNAPSHOT_DIR: snapshot
  # .ROOT_DIR is built-in variable, see https://taskfile.dev/api/#special-variables
  SNAPSHOT_BIN: "{{ .ROOT_DIR }}/{{ .SNAPSHOT_DIR }}/{{ OS }}-build_{{ OS }}_{{ ARCH }}/{{ .PROJECT }}"
  CHANGELOG: CHANGELOG.md
  NEXT_VERSION: VERSION
  MAKEDIR_P: 'python -c "import sys; import os; os.makedirs(sys.argv[1], exist_ok=True)"'
  TEST_F: 'python -c "import sys; import os; sys.exit(0) if os.path.isfile(sys.argv[1]) else sys.exit(1)"'
  CAT: '{{ if eq OS "windows" }}type{{ else }}cat{{ end }}'
  DOT_EXE: '{{ if eq OS "windows" }}.exe{{ else }}{{ end}}'
  BINNY_FILENAME: '{{ .PROJECT }}{{ .DOT_EXE }}'
  BINNY_PATH: '{{ .TOOL_DIR }}/{{ .BINNY_FILENAME }}'

tasks:

  ## High-level tasks #################################

  default:
    # desc: Run all validation tasks
    aliases:
      - pr-validations
      - validations
    cmds:
      - task: static-analysis
      - task: test
      - task: assert-windows-build
      - task: build

  static-analysis:
    desc: Run all static analysis tasks
    cmds:
      - task: check-go-mod-tidy
      - task: check-licenses
      - task: lint

  test:
    desc: Run all levels of test
    deps: [tools]
    cmds:
      - task: unit
      - task: cli

  ## Bootstrap tasks #################################

  binny:
    internal: true
    desc: Get the binny tool
    generates:
      - "{{ .BINNY_PATH }}"
    status:
      - '{{ .TEST_F }} {{ .BINNY_PATH }}'
    # we just need a release of binny, doesn't matter which one (binny will update itself, this is just a bootstrap step)
    # note: on the first release of binny, switch to the curl approach
    # cmd: "curl -sSfL https://raw.githubusercontent.com/{{ .OWNER }}/{{ .PROJECT }}/main/install.sh | sh -s -- -b {{ .TOOL_DIR }}"
    cmds:
      - cmd: '{{ .MAKEDIR_P }} {{ .TOOL_DIR }}'
      - cmd: "go build -o {{ .BINNY_PATH }} ./cmd/binny"
      - cmd: 'echo "Built binny a {{ .BINNY_PATH }}"' # TODO: just added for debugging
    silent: true

  tools:
    desc: Install all tools needed for CI and local development
    deps: [binny]
    aliases:
      - bootstrap
    generates:
      - ".binny.yaml"
      - "{{ .TOOL_DIR }}/*"
    status:
      - "{{ .TOOL_DIR }}/binny check -v"
    cmd: "{{ .TOOL_DIR }}/binny install -v"
    silent: true

  update-tools:
    desc: Update pinned versions of all tools to their latest available versions
    deps: [binny]
    generates:
      - ".binny.yaml"
      - "{{ .TOOL_DIR }}/*"
    cmd: "{{ .TOOL_DIR }}/binny update -v"
    silent: true

  list-tools:
    desc: List all tools needed for CI and local development
    deps: [binny]
    cmd: "{{ .TOOL_DIR }}/binny list"
    silent: true

  list-tool-updates:
    desc: List all tools that are not up to date relative to the binny config
    deps: [binny]
    cmd: "{{ .TOOL_DIR }}/binny list --updates"
    silent: true


  ## Static analysis tasks #################################

  format:
    desc: Auto-format all source code
    deps: [tools]
    cmds:
      - gofmt -w -s .
      - "{{ .TOOL_DIR }}/gosimports -local github.com/anchore -w ."
      - go mod tidy

  lint-fix:
    desc: Auto-format all source code + run golangci lint fixers
    deps: [tools]
    cmds:
      - task: format
      - "{{ .TOOL_DIR }}/golangci-lint run --tests=false --fix"

  lint:
    desc: Run gofmt + golangci lint checks
    vars:
      BAD_FMT_FILES:
        sh: gofmt -l -s .
      BAD_FILE_NAMES:
        sh: "find . | grep -e ':' || true"
    deps: [tools]
    cmds:
      # ensure there are no go fmt differences
      - cmd: 'test -z "{{ .BAD_FMT_FILES }}" || (echo "files with gofmt issues: [{{ .BAD_FMT_FILES }}]"; exit 1)'
        silent: true
      # ensure there are no files with ":" in it (a known back case in the go ecosystem)
      - cmd: 'test -z "{{ .BAD_FILE_NAMES }}" || (echo "files with bad names: [{{ .BAD_FILE_NAMES }}]"; exit 1)'
        silent: true
      # run linting
      - "{{ .TOOL_DIR }}/golangci-lint run --tests=false"


  check-licenses:
    # desc: Ensure transitive dependencies are compliant with the current license policy
    deps: [tools]
    cmd: "{{ .TOOL_DIR }}/bouncer check ./..."

  check-go-mod-tidy:
    # desc: Ensure go.mod and go.sum are up to date
    cmds:
      - .github/scripts/go-mod-tidy-check.sh && echo "go.mod and go.sum are tidy!"

  ## Testing tasks #################################

  unit:
    desc: Run all unit tests
    vars:
      TEST_PKGS:
          sh: "python ./scripts/list_units.py anchore binny"

      # unit test coverage threshold (in % coverage)
      COVERAGE_THRESHOLD: 35
    cmds:
      - cmd: "{{ .MAKEDIR_P }} {{ .TMP_DIR }}"
        silent: true
      - "go test -coverprofile {{ .TMP_DIR }}/unit-coverage-details.txt {{ .TEST_PKGS }}"
      - cmd: '{{if eq OS "windows"}}python {{end}}.github/scripts/coverage.py {{ .COVERAGE_THRESHOLD }} {{ .TMP_DIR }}/unit-coverage-details.txt'
        silent: true

  cli:
    desc: Run CLI tests
    deps: [snapshot]
    vars:
      TEST_PKGS: "go list ./test/cli/..."
    sources:
      - "{{ .SNAPSHOT_BIN }}"
      - ./test/cli/**
      - ./**/*.go
    cmds:
      - cmd: "echo 'testing {{ .SNAPSHOT_BIN }}'"
      - cmd: "go test ./test/cli/..."

  ## Build-related targets #################################

  changelog:
    desc: Generate a changelog
    deps: [tools]
    generates:
      - "{{ .CHANGELOG }}"
      - "{{ .NEXT_VERSION }}"
    cmds:
      - "{{ .TOOL_DIR }}/chronicle -vv -n --version-file {{ .NEXT_VERSION }} > {{ .CHANGELOG }}"
      - "{{ .TOOL_DIR }}/glow {{ .CHANGELOG }}"

  snapshot:
    desc: Create a snapshot release
    aliases:
      - build
    deps: [tools]
    sources:
      - "{{ .SNAPSHOT_BIN }}"
      - ./test/cli/**
      - ./**/*.go
    cmds:
      - silent: true
        cmd: |        
          echo "dist: {{ .SNAPSHOT_DIR }}" > {{ .TMP_DIR }}/goreleaser.yaml
          {{ .CAT }} .goreleaser.yaml >> {{ .TMP_DIR }}/goreleaser.yaml

      - "{{ .TOOL_DIR }}/goreleaser release --clean --skip=publish --skip=sign --snapshot --config {{ .TMP_DIR }}/goreleaser.yaml"

  assert-windows-build:
    desc: Assert that binny compiles on Windows
    cmds:
      - "GOOS=windows go build ./cmd/binny"

  ## Release targets #################################

  release:
    desc: Create a release
    interactive: true
    deps: [tools]
    cmds:
      - cmd: .github/scripts/trigger-release.sh
        silent: true

  ## CI-only targets #################################

  ci-check:
    # desc: "[CI only] Are you in CI?"
    cmds:
      - cmd: .github/scripts/ci-check.sh
        silent: true

  ci-validate:
    # desc: "[CI only] Run all CI validations"
    cmds:
      - task: ci-check
      - task: default

  ci-release:
    # desc: "[CI only] Create a release"
    deps: [tools]
    cmds:
      - task: ci-check
      - "{{ .TOOL_DIR }}/chronicle -vvv > CHANGELOG.md"
      - cmd: "cat CHANGELOG.md"
        silent: true
      - "{{ .TOOL_DIR }}/goreleaser release --clean --release-notes CHANGELOG.md"

# yaml-language-server: $schema=https://taskfile.dev/schema.json
