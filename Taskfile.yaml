version: "3"
vars:
  TOOL_DIR: .tool

  OWNER: anchore
  PROJECT: binny

  # unit test coverage threshold (in % coverage)
  COVERAGE_THRESHOLD: 50

  TMP_DIR: .tmp
  SNAPSHOT_DIR: snapshot
  CHANGELOG: CHANGELOG.md
  NEXT_VERSION: VERSION

tasks:

  ## High-level tasks #################################

  default:
    desc: Run all validation tasks
    cmds:
      - task: static-analysis
      - task: test
      - task: build

  static-analysis:
    desc: Run all static analysis tasks
    cmds:
      - task: check-go-mod-tidy
      - task: check-licenses
      - task: lint

  test:
    desc: Run all levels of test
    cmds:
      - task: unit

  ## Static analysis tasks #################################

  format:
    desc: Auto-format all source code
    cmds:
      - gofmt -w -s .
      - "{{ .TOOL_DIR }}/gosimports -local github.com/anchore -w ."
      - go mod tidy

  lint-fix:
    desc: Auto-format all source code + run golangci lint fixers
    cmds:
      - task: format
      - "{{ .TOOL_DIR }}/golangci-lint run --tests=false"

  lint:
    desc: Run gofmt + golangci lint checks
    vars:
      BAD_FMT_FILES:
        sh: gofmt -l -s .
      BAD_FILE_NAMES:
        sh: "find . | grep -e ':' || true"
    cmds:
      # ensure there are no go fmt differences
      - cmd: 'test -z "{{ .BAD_FMT_FILES }}" || (echo "files with gofmt issues: [{{ .BAD_FMT_FILES }}]"; exit 1)'
        silent: true
      # ensure there are no files with ":" in it (a known back case in the go ecosystem)
      - cmd: 'test -z "{{ .BAD_FILE_NAMES }}" || (echo "files with bad names: [{{ .BAD_FILE_NAMES }}]"; exit 1)'
        silent: true
      # run linting
      - "{{ .TOOL_DIR }}/golangci-lint run --tests=false"


  check-licenses:
    desc: Ensure transitive dependencies are compliant with the current license policy
    cmds:
      - "{{ .TOOL_DIR }}/bouncer check ./..."

  check-go-mod-tidy:
    desc: Ensure go.mod and go.sum are up to date
    cmds:
      - .github/scripts/go-mod-tidy-check.sh && echo "go.mod and go.sum are tidy!"

  ## Testing tasks #################################

  unit:
    desc: Run all unit tests
    vars:
      TEST_PKGS:
          sh: "go list ./... | grep -v {{ .OWNER }}/{{ .PROJECT }}/test | tr '\n' ' '"
    cmds:
      - cmd: "mkdir -p {{ .TMP_DIR }}"
        silent: true
      - "go test -coverprofile {{ .TMP_DIR }}/unit-coverage-details.txt {{ .TEST_PKGS }}"
      - cmd: ".github/scripts/coverage.py {{ .COVERAGE_THRESHOLD }} {{ .TMP_DIR }}/unit-coverage-details.txt"
        silent: true

  ## Build-related targets #################################

  changelog:
    desc: Generate a changelog
    generates:
      - "{{ .CHANGELOG }}"
      - "{{ .NEXT_VERSION }}"
    cmds:
      - "{{ .TOOL_DIR }}/chronicle -vv -n --version-file {{ .NEXT_VERSION }} > {{ .CHANGELOG }}"
      - "{{ .TOOL_DIR }}/glow {{ .CHANGELOG }}"

  snapshot:
    desc: Create a snapshot release
    aliases:
      - build
    cmds:
      - silent: true
        cmd: |        
          echo "dist: {{ .SNAPSHOT_DIR }}" > {{ .TMP_DIR }}/goreleaser.yaml
          cat .goreleaser.yaml >> {{ .TMP_DIR }}/goreleaser.yaml

      - "{{ .TOOL_DIR }}/goreleaser release --clean --skip-publish --skip-sign --snapshot --config {{ .TMP_DIR }}/goreleaser.yaml"


  ## Release targets #################################

  release:
    desc: Create a release
    interactive: true
    cmds:
      - cmd: .github/scripts/trigger-release.sh
        silent: true

  ## CI-only targets #################################

  ci-check:
    desc: Are you in CI?
    cmds:
      - cmd: .github/scripts/ci-check.sh
        silent: true

  ci-validate:
    desc: Run all CI validations
    cmds:
      - cmd: .github/scripts/ci-check.sh
        silent: true
      - task: default

  ci-release:
    desc: Create a release
    cmds:
      - task: ci-check
      - "{{ .TOOL_DIR }}/goreleaser release --clean"
